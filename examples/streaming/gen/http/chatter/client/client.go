// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter client HTTP transport
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package client

import (
	"context"
	"io"
	"net/http"

	goa "goa.design/goa"
	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	chattersvcviews "goa.design/goa/examples/streaming/gen/chatter/views"
	goahttp "goa.design/goa/http"
)

// Client lists the chatter service endpoint HTTP clients.
type Client struct {
	// Login Doer is the HTTP client used to make requests to the login endpoint.
	LoginDoer goahttp.Doer

	// Echoer Doer is the HTTP client used to make requests to the echoer endpoint.
	EchoerDoer goahttp.Doer

	// Listener Doer is the HTTP client used to make requests to the listener
	// endpoint.
	ListenerDoer goahttp.Doer

	// Summary Doer is the HTTP client used to make requests to the summary
	// endpoint.
	SummaryDoer goahttp.Doer

	// History Doer is the HTTP client used to make requests to the history
	// endpoint.
	HistoryDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme       string
	host         string
	encoder      func(*http.Request) goahttp.Encoder
	decoder      func(*http.Response) goahttp.Decoder
	dialer       goahttp.Dialer
	connConfigFn goahttp.ConnConfigureFunc
	stream       goahttp.Streamer
}

// echoerClientStream implements the chattersvc.EchoerClientStream interface.
type echoerClientStream struct {
	// stream is the HTTP stream interface.
	stream goahttp.Streamer
}

// listenerClientStream implements the chattersvc.ListenerClientStream
// interface.
type listenerClientStream struct {
	// stream is the HTTP stream interface.
	stream goahttp.Streamer
}

// summaryClientStream implements the chattersvc.SummaryClientStream interface.
type summaryClientStream struct {
	// stream is the HTTP stream interface.
	stream goahttp.Streamer
}

// historyClientStream implements the chattersvc.HistoryClientStream interface.
type historyClientStream struct {
	// stream is the HTTP stream interface.
	stream goahttp.Streamer
	// view is the view to render  result type before sending to the websocket
	// connection.
	view string
}

// NewClient instantiates HTTP clients for all the chatter service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	connConfigFn goahttp.ConnConfigureFunc,
	stream goahttp.Streamer,
) *Client {
	return &Client{
		LoginDoer:           doer,
		EchoerDoer:          doer,
		ListenerDoer:        doer,
		SummaryDoer:         doer,
		HistoryDoer:         doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		connConfigFn:        connConfigFn,
		stream:              stream,
	}
}

// Login returns an endpoint that makes HTTP requests to the chatter service
// login server.
func (c *Client) Login() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginRequest(c.encoder)
		decodeResponse = DecodeLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("chatter", "login", err)
		}
		return decodeResponse(resp)
	}
}

// Echoer returns an endpoint that makes HTTP requests to the chatter service
// echoer server.
func (c *Client) Echoer() goa.Endpoint {
	var (
		encodeRequest  = EncodeEchoerRequest(c.encoder)
		decodeResponse = DecodeEchoerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEchoerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("chatter", "echoer", err)
		}
		c.stream.SetContext(ctx)
		c.stream.WithConn(conn, c.connConfigFn)
		stream := &echoerClientStream{stream: c.stream}
		return stream, nil
	}
}

// Recv reads instances of "string" from the "echoer" endpoint websocket
// connection.
func (s *echoerClientStream) Recv() (string, error) {
	var (
		rv   string
		body string
		err  error
	)
	if err = s.stream.RecvMsg(&body); err != nil {
		return rv, err
	}
	return body, nil
}

// Send streams instances of "string" to the "echoer" endpoint websocket
// connection.
func (s *echoerClientStream) Send(v string) error {
	return s.stream.SendMsg(v)
}

// Close closes the "echoer" endpoint websocket connection.
func (s *echoerClientStream) Close() error {
	var err error
	// Send a nil payload to the server implying client closing connection.
	if err = s.stream.SendMsg(nil); err != nil {
		return err
	}
	return s.stream.Close()
}

// Context returns the stream context for "echoer" endpoint.
func (s *echoerClientStream) Context() context.Context {
	return s.stream.Context()
}

// SetContext updates the stream context for "echoer" endpoint.
func (s *echoerClientStream) SetContext(ctx context.Context) {
	s.stream.SetContext(ctx)
}

// Listener returns an endpoint that makes HTTP requests to the chatter service
// listener server.
func (c *Client) Listener() goa.Endpoint {
	var (
		encodeRequest  = EncodeListenerRequest(c.encoder)
		decodeResponse = DecodeListenerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListenerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("chatter", "listener", err)
		}
		c.stream.SetContext(ctx)
		c.stream.WithConn(conn, c.connConfigFn)
		stream := &listenerClientStream{stream: c.stream}
		return stream, nil
	}
}

// Send streams instances of "string" to the "listener" endpoint websocket
// connection.
func (s *listenerClientStream) Send(v string) error {
	return s.stream.SendMsg(v)
}

// Close closes the "listener" endpoint websocket connection.
func (s *listenerClientStream) Close() error {
	var err error
	// Send a nil payload to the server implying client closing connection.
	if err = s.stream.SendMsg(nil); err != nil {
		return err
	}
	return s.stream.Close()
}

// Context returns the stream context for "listener" endpoint.
func (s *listenerClientStream) Context() context.Context {
	return s.stream.Context()
}

// SetContext updates the stream context for "listener" endpoint.
func (s *listenerClientStream) SetContext(ctx context.Context) {
	s.stream.SetContext(ctx)
}

// Summary returns an endpoint that makes HTTP requests to the chatter service
// summary server.
func (c *Client) Summary() goa.Endpoint {
	var (
		encodeRequest  = EncodeSummaryRequest(c.encoder)
		decodeResponse = DecodeSummaryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSummaryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("chatter", "summary", err)
		}
		c.stream.SetContext(ctx)
		c.stream.WithConn(conn, c.connConfigFn)
		stream := &summaryClientStream{stream: c.stream}
		return stream, nil
	}
}

// CloseAndRecv stops sending messages to the "summary" endpoint websocket
// connection and reads instances of "chattersvc.ChatSummaryCollection" from
// the connection.
func (s *summaryClientStream) CloseAndRecv() (chattersvc.ChatSummaryCollection, error) {
	var (
		rv   chattersvc.ChatSummaryCollection
		body SummaryResponseBody
		err  error
	)
	defer s.stream.Close()
	// Send a nil payload to the server implying end of message
	if err = s.stream.SendMsg(nil); err != nil {
		return rv, err
	}
	if err = s.stream.RecvMsg(&body); err != nil {
		if err == io.EOF {
			s.stream.Close()
		}
		return rv, err
	}
	res := NewSummaryChatSummaryCollectionOK(body)
	vres := chattersvcviews.ChatSummaryCollection{res, "default"}
	if err := chattersvcviews.ValidateChatSummaryCollection(vres); err != nil {
		return rv, goahttp.ErrValidationError("chatter", "summary", err)
	}
	return chattersvc.NewChatSummaryCollection(vres), nil
}

// Send streams instances of "string" to the "summary" endpoint websocket
// connection.
func (s *summaryClientStream) Send(v string) error {
	return s.stream.SendMsg(v)
}

// Context returns the stream context for "summary" endpoint.
func (s *summaryClientStream) Context() context.Context {
	return s.stream.Context()
}

// SetContext updates the stream context for "summary" endpoint.
func (s *summaryClientStream) SetContext(ctx context.Context) {
	s.stream.SetContext(ctx)
}

// History returns an endpoint that makes HTTP requests to the chatter service
// history server.
func (c *Client) History() goa.Endpoint {
	var (
		encodeRequest  = EncodeHistoryRequest(c.encoder)
		decodeResponse = DecodeHistoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildHistoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("chatter", "history", err)
		}
		c.stream.SetContext(ctx)
		c.stream.WithConn(conn, c.connConfigFn)
		stream := &historyClientStream{stream: c.stream}
		view := resp.Header.Get("goa-view")
		stream.SetView(view)
		return stream, nil
	}
}

// Recv reads instances of "chattersvc.ChatSummary" from the "history" endpoint
// websocket connection.
func (s *historyClientStream) Recv() (*chattersvc.ChatSummary, error) {
	var (
		rv   *chattersvc.ChatSummary
		body HistoryResponseBody
		err  error
	)
	if err = s.stream.RecvMsg(&body); err != nil {
		if err == io.EOF {
			s.stream.Close()
		}
		return rv, err
	}
	res := NewHistoryChatSummaryOK(&body)
	vres := &chattersvcviews.ChatSummary{res, s.view}
	if err := chattersvcviews.ValidateChatSummary(vres); err != nil {
		return rv, goahttp.ErrValidationError("chatter", "history", err)
	}
	return chattersvc.NewChatSummary(vres), nil
}

// SetView sets the view to render the  type before sending to the "history"
// endpoint websocket connection.
func (s *historyClientStream) SetView(view string) {
	s.view = view
}

// Context returns the stream context for "history" endpoint.
func (s *historyClientStream) Context() context.Context {
	return s.stream.Context()
}

// SetContext updates the stream context for "history" endpoint.
func (s *historyClientStream) SetContext(ctx context.Context) {
	s.stream.SetContext(ctx)
}
